#点集,方便初始化蛇和食物
class Point:
    row = 0
    col = 0
    def __init__(self, row, col):
        self.row = row
        self.col = col
    def copy(self):
        return Point(row=self.row, col=self.col)
import pygame
import random

#初始化边界大小和其他属性
W = 800
H = 600

ROW = 30
COL = 40

size = (W, H)

bg_color = (255, 255, 255)
snake_color = (200, 200, 200)

head = Point(row=int(ROW/2), col=int(COL/2))
head_color = (0, 0, 0)

snakes = [
    Point(row=head.row, col=head.col-1),
    Point(row=head.row, col=head.col-2),
    Point(row=head.row, col=head.col-3),
]

#食物随机生成，不能生成到蛇身体的位置
def gen_food():
    while 1:
        pos = Point(row=random.randint(0, ROW-1), col=random.randint(0, COL-1))
        is_coll = False
        if head.row == pos.row and head.col == pos.col:
            is_coll = True
        for snake in snakes:
            if snake.row == pos.row and snake.col == pos.col:
                is_coll = True
                break
        if not is_coll:
            break
    return pos


food = gen_food()
food_color = (255, 255, 0)


direct = 'right'

#给特定位置上色
def rect(point, color):
    cell_width = W/COL
    cell_height = H/ROW
    left = point.col*cell_width
    top = point.row*cell_height
    pygame.draw.rect(window, color, (left, top, cell_width, cell_height))


pygame.init()
window = pygame.display.set_mode(size)
pygame.display.set_caption('贪吃蛇')

quit = True
clock = pygame.time.Clock()
while quit:
    for event in pygame.event.get():
        if(event.type == pygame.QUIT):
            quit = False
        elif event.type == pygame.KEYDOWN:
            #使用键盘时改变蛇的方向，提前打印事务得到key值
            if event.key == 273 or event.key == 119:
                if direct == 'left' or direct == 'right':
                    direct = 'up'
            elif event.key == 274 or event.key == 115:
                if direct == 'left' or direct == 'right':
                    direct = 'down'
            elif event.key == 276 or event.key == 97:
                if direct == 'up' or direct == 'down':
                    direct = 'left'
            elif event.key == 275 or event.key == 100:
                if direct == 'up' or direct == 'down':
                    direct = 'right'
    #吃到食物即蛇头与食物重合
    eat = (head.row == food.row and head.col == food.col)
    if eat:
        food = gen_food()
    snakes.insert(0, head.copy())
    if not eat:
        snakes.pop()

    if direct == 'left':
        head.col -= 1
    elif direct == 'right':
        head.col += 1
    elif direct == 'up':
        head.row -= 1
    elif direct == 'down':
        head.row += 1
    #碰到墙壁和自身则会死亡
    dead = False
    if head.col < 0 or head.row < 0 or head.col >= COL or head.row >= ROW:
        dead = True
    for snake in snakes:
        if head.col == snake.col and head.row == snake.row:
            dead = True
            break
    if dead:
        print("游戏结束")
        quit = False
    pygame.draw.rect(window, bg_color, (0, 0, W, H))

    for snake in snakes:
        rect(snake, snake_color)
    rect(head, head_color)
    rect(food, food_color)

    pygame.display.flip()
    clock.tick(20)
